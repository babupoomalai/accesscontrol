package accesscontrol.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import accesscontrol.models.Node;

public class AccessService {

	private static final String ROOT_PATH = "/";

	public void restrictPage(String userId, String page, HashMap<String, Node<String>> hashMap) {

		if (page == null || page.trim().length() == 0) {
			return;
		}

		List<String> dirList = getDirectoryList(page);

		Node<String> node;

		if (page.trim().equals(ROOT_PATH)) {
			Node<String> root = addNode(null, ROOT_PATH);
			hashMap.put(ROOT_PATH, root);
		} else {
			node = hashMap.get(page);
			if (node == null) {
				Node<String> root = addNode(null, page);
				hashMap.put(dirList.get(0), root);
				return;
			}

			for (String directory : dirList) {
				if (node.getChildren().containsKey(directory)) {
					node = node.getChildren().get(directory);
				} else {
					Node<String> child = addNode(node, page.substring(page.indexOf(directory) + directory.length()));
					node.getChildren().put(directory, child);
					return;
				}

			}
		}
	}

	public boolean isPageRestricted(String page, HashMap<String, Node<String>> hashMap) {
		if (page == null || page.trim().length() == 0) {
			return false;
		}

		// check for root page
		if (page.trim().equals(ROOT_PATH)) {
			return hashMap.containsKey(ROOT_PATH);
		}

		List<String> dirList = getDirectoryList(page);
		if (!hashMap.containsKey(dirList.get(0))) {
			return false;
		}
		Node<String> node = hashMap.get(dirList.get(0));

//		for (int i = 1; i < dirList.size(); i++) {
//			if()
//		}

		return isDirExists(node, dirList, 0);
	}

	private boolean isDirExists(Node<String> node, List<String> dirList, int index) {
		if (node == null) {
			return true;
		}
		if (dirList.size() < index + 1) {
			return true;
		}
	}

	public Node<String> addNode(Node<String> parent, String value) {
		if (value == null || value.trim().length() == 0) {
			return null;
		}

		List<String> dirList = getDirectoryList(value);

		Node<String> parentNode = parent;
		Node<String> firstNode = null;

		for (String dir : dirList) {
			Node<String> node = new Node<String>(dir);
			node.setParent(parentNode);
			if (parentNode != null) {
				parentNode.getChildren().put(dir, node);
			}
			parentNode = node;
			if (firstNode == null) {
				firstNode = node;
			}
		}

		return firstNode;
	}

	private List<String> getDirectoryList(String page) {
		String[] directories = page.split(ROOT_PATH);
		List<String> dirList = new ArrayList<String>(Arrays.asList(directories));
		Iterator<String> iterator = dirList.iterator();
		while (iterator.hasNext()) {
			String val = iterator.next();
			if (val == null || val.trim().equals("")) {
				iterator.remove();
			}
		}
		return dirList;
	}

}
