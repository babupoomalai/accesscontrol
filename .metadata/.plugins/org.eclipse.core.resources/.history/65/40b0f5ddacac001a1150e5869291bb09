package accesscontrol.controller;

import java.util.HashMap;
import java.util.Map;

import accesscontrol.models.Node;
import accesscontrol.models.User;
import accesscontrol.models.UserType;
import accesscontrol.service.AccessService;

public class AccessManager {
	private Map<String, HashMap<String, Node<String>>> userBlocklistPages;
	private Map<String, User> userMap;
	private User admin;

	private static AccessManager instance;

	private AccessManager() {
		this.userBlocklistPages = new HashMap<String, HashMap<String, Node<String>>>();
		this.userMap = new HashMap<String, User>();
		this.admin = new User("u0", UserType.ADMIN, "admin");
	}

	public static AccessManager getInstance() {
		if (instance == null) {
			instance = new AccessManager();
		}
		return instance;
	}

	public void showRestrictedPages(String userId) {
		if (!userBlocklistPages.containsKey(userId)) {
			return;
		}

		HashMap<String, Node<String>> blocklistedPages = userBlocklistPages.get(userId);
		for (String page : blocklistedPages.keySet()) {
			printNode(blocklistedPages.get(page), "");
		}
	}

	private void printNode(Node<String> node, String parent) {
		if (node == null) {
			System.out.println(parent);
			return;
		}

		if (node.getChildren() == null || node.getChildren().size() == 0) {
			System.out.println(parent + "/" + node.getValue());
			return;
		}

		for (String key : node.getChildren().keySet()) {
			printNode(node.getChildren().get(key), parent + "/" + node.getValue());
		}
	}

	public void addUser(String name, String id) {
		User user = new User(id, UserType.USER, name);
		userMap.put(id, user);
	}

	public void restrictPage(String userId, String page) {
		if (!userBlocklistPages.containsKey(userId)) {
			HashMap<String, Node<String>> pageMap = new HashMap<String, Node<String>>();
			userBlocklistPages.put(userId, pageMap);
		}
		new AccessService().restrictPage(userId, page, userBlocklistPages.get(userId));
//		System.out.println("ip: " + userBlocklistPages.get(userId));
	}

	public boolean isPageRestricted(String userId, String page) {
		if (!userBlocklistPages.containsKey(userId)) {
			return false;
		}

		HashMap<String, Node<String>> blocklistedPages = userBlocklistPages.get(userId);
		return new AccessService().isPageRestricted(page, blocklistedPages);
	}

}
